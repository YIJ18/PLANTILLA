# Generated by Django 4.2.7 on 2025-10-11 23:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del sensor', max_length=100)),
                ('sensor_type', models.CharField(choices=[('gyroscope', 'Giroscopio'), ('accelerometer', 'Acelerómetro'), ('gps', 'GPS'), ('altimeter', 'Altímetro'), ('temperature', 'Temperatura'), ('pressure', 'Presión'), ('humidity', 'Humedad'), ('compass', 'Brújula'), ('battery', 'Batería'), ('other', 'Otro')], help_text='Tipo de sensor', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Descripción del sensor')),
                ('unit', models.CharField(help_text='Unidad de medida (ej: °C, m/s, %)', max_length=20)),
                ('min_value', models.FloatField(blank=True, help_text='Valor mínimo esperado', null=True)),
                ('max_value', models.FloatField(blank=True, help_text='Valor máximo esperado', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indica si el sensor está activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensores',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TelemetryData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(help_text='Valor medido por el sensor')),
                ('timestamp', models.DateTimeField(help_text='Momento de la medición')),
                ('latitude', models.FloatField(blank=True, help_text='Latitud donde se tomó la medición', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitud donde se tomó la medición', null=True)),
                ('altitude', models.FloatField(blank=True, help_text='Altitud donde se tomó la medición (metros)', null=True)),
                ('quality', models.CharField(choices=[('good', 'Buena'), ('warning', 'Advertencia'), ('critical', 'Crítica')], default='good', help_text='Calidad de la medición', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemetry_data', to='telemetry.sensor')),
            ],
            options={
                'verbose_name': 'Dato de Telemetría',
                'verbose_name_plural': 'Datos de Telemetría',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GyroscopeData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='Momento de la medición')),
                ('roll', models.FloatField(help_text='Rotación en el eje X (grados)')),
                ('pitch', models.FloatField(help_text='Rotación en el eje Y (grados)')),
                ('yaw', models.FloatField(help_text='Rotación en el eje Z (grados)')),
                ('angular_velocity_x', models.FloatField(blank=True, help_text='Velocidad angular en X (°/s)', null=True)),
                ('angular_velocity_y', models.FloatField(blank=True, help_text='Velocidad angular en Y (°/s)', null=True)),
                ('angular_velocity_z', models.FloatField(blank=True, help_text='Velocidad angular en Z (°/s)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Dato de Giroscopio',
                'verbose_name_plural': 'Datos de Giroscopio',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='telemetry_g_timesta_fb2dc0_idx')],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título de la alerta', max_length=200)),
                ('message', models.TextField(help_text='Mensaje detallado de la alerta')),
                ('alert_type', models.CharField(choices=[('info', 'Información'), ('warning', 'Advertencia'), ('error', 'Error'), ('critical', 'Crítico')], default='info', help_text='Tipo de alerta', max_length=10)),
                ('is_acknowledged', models.BooleanField(default=False, help_text='Indica si la alerta ha sido reconocida')),
                ('acknowledged_at', models.DateTimeField(blank=True, help_text='Momento en que se reconoció la alerta', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, help_text='Usuario que reconoció la alerta', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('sensor', models.ForeignKey(blank=True, help_text='Sensor relacionado con la alerta', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='telemetry.sensor')),
                ('telemetry_data', models.ForeignKey(blank=True, help_text='Dato de telemetría que generó la alerta', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='telemetry.telemetrydata')),
            ],
            options={
                'verbose_name': 'Alerta',
                'verbose_name_plural': 'Alertas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='telemetrydata',
            index=models.Index(fields=['sensor', 'timestamp'], name='telemetry_t_sensor__8f76c8_idx'),
        ),
        migrations.AddIndex(
            model_name='telemetrydata',
            index=models.Index(fields=['timestamp'], name='telemetry_t_timesta_301571_idx'),
        ),
        migrations.AddIndex(
            model_name='telemetrydata',
            index=models.Index(fields=['quality'], name='telemetry_t_quality_635878_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['alert_type', 'is_acknowledged'], name='telemetry_a_alert_t_2d9585_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['created_at'], name='telemetry_a_created_0dd447_idx'),
        ),
    ]
